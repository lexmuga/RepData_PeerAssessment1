ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,n=10)
tail(plants,n=15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(100,size=100,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,10)
my_pois <- replicate(100,rpois(5,10))
my_pois
colMeans(cm)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- POSlt(Sys.time())
t2 <- as.POSlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
d1
weekdays(d1)
months(t1)
quarter(t2)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time > t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1,units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,=cars$dist)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
View(flags)
plot(x=cars$speed, y =cars$dist, xlab="Speed")
plot(x=cars$speed, y =cars$dist, xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed, y =cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y =cars$dist, xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed, y =cars$dist, main="My Plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim = c(10, 15))
plot(cars, pch=2)
data(mtcars)
head(mtcars)
summary(mtcars)
?boxplot
boxplot(mpg~cyl,data=mtcars)
hist(mtcars$mpg)
library(datasets)
data(iris)
?iris
summary(iris)
iris$virginica
head(iris)
iris(1,)
iris[1,]
iris[2,]
iris[3,]
summary(iris)
iris$Species
v <- iris$Species== "virginica"
v
mean(iris$Species[v,])
v
iris$Species[v,]
iris$Species[,v]
iris$Species
names(iris)
iris$Sepal.Length
mean(iris$Sepal.Length[v,])
v
iris$Sepal.Length
iris$Sepal.Length[,v]
iris$Sepal.Length[v]
mean(iris$Sepal.Length[v])
names(iris)
iris[1:4]
apply[iris[,1:4],1,mean]
apply(iris[,1:4],1,mean)
apply(iris[1:4,],1,mean)
apply(iris[1:4,],2,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
mean(mtcars$mpg,mtcars$cyl)
head(mtcars&mpg)
head(mtcars$mpg)
names(mtcars)
mtcars$cyl
tapply(mtcars$cyl,mtcars$mpg,mean)
mtcars[1:2,]
mtcars[,1:2]
with(mtcars,tapply(mpg,cyl,mean))
with(iris,tapply(Sepal.Length,Species,mean))
apply(iris[,1:4],2,mean)
x
a <- with(mtcars,tapply(mpg,cyl,mean))
a
a[6]
a["6"]
abs(a["4"]-a["8"])
debug(ls)
ls()
quit
exit
exit()
exit()
quit()
stop
stop()
?
help
help()
?help
exit
exit()
debug
debug()
debug(ls)
ls
ls()
Quit()
Q()
Quit()
exit
Exit
Exit()
notraceback
noTraceback
else if (length(grep("[^\\\\]\\[<-", pattern))) {
else if (length(grep("[^\\\\]\\[<-", pattern))) {
source('~/.active-rstudio-document', echo=TRUE)
debug(ls)
ls
ls()
?debug
debug(ls)
ls()
cont
library(datasets)
data(iris)
with(iris,tapply(Sepal.Length,Species,mean))
apply(iris[,1:4],2,mean)
data(mtcars)
x <- with(mtcars,tapply(mpg,cyl,mean))
x
abs(x["4"]-x["8"])
summary(mtcars)
x <- with(mtcars,tapply(hp,cyl,mean))
abs(x["4"]-x["8"])
x
y <- with(mtcars,tapply(mpg,cyl,mean))
y
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[,1:4],2,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
source('~/.active-rstudio-document', echo=TRUE)
b1 <- matrix(1:4,2,2)
b1
b2 <- makeCacheMatrix(b1)
b3 <- cacheSolve(b2)
b2
b3
b3%*%b1
y <- "149e3f8b7bae5dc9f00448f5fec3a683f16e001a"
length(y)
length(list(y))
list(y)
vector(y)
y
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(1)
sample(1:10,4)
system.time(readlines("http://www.ateneo.edu"))
system.time(readLines("http://www.ateneo.edu"))
hilbert <- function(n){
i <- 1:n
1 / outer(i - 1, i, "+")
}
x <- hilbert(1000)
system.time(svd(x))
system.time(readLines("http://www.jhsph.edu"))
system.time(readLines("http://www.google.com"))
system.time(readLines("http://www.google.com/"))
system.time(readLines("http://www.congress.gov.ph"))
system.time(readLines("http://www.dost.gov.ph"))
system.time(readLines("http://www.ateneo.edu"))
system.time(readLines("http://www.congress.gov.ph"))
system.time(readLines("http://www.upd.edu.ph"))
system.time(readLines("http://www.upd.edu.ph"))
system.time(readLines("http://www.upd.edu.ph"))
system.time(readLines("http://www.ateneo.edu"))
system.time(readLines("http://www.upd.edu.ph"))
system.time(readLines("http://www.congress.gov.ph"))
system.time(readLines("http://www.dlsu.edu.ph"))
?system.time
system.time(readLines("http://www.adnu.edu.ph"))
system.time(readLines("http://www.adzu.edu.ph"))
system.time(readLines("http://www.adzu.edu.ph"))
system.time(readLines("http://www.xu.edu.ph"))
system.time(readLines("http://www.ateneo.edu"))
system.time(readLines("http://www.congress.gov.ph"))
system.time(readLines("http://www.xu.edu.ph"))
system.time(readLines("http://www.adnu.edu.ph"))
system.time(readLines("http://www.adzu.edu.ph"))
system.time(readLines("http://www.xu.edu.ph"))
system.time(readLines("http://www.su.edu.ph"))
system.time(readLines("http://www.smart.com.ph"))
system.time(readLines("http://www.pldt.com.ph"))
system.time(readLines("http://www.ateneo.edu"))
system.time(readLines("http://www.admu.edu.ph"))
system.time(readLines("http://www.admu.edu.ph"))
system.time(readLines("http://www.ateneo.edu"))
system.time(readLines("http://www.dost.gov.ph"))
system.time(readLines("http://www.xu.edu.ph"))
system.time(readLines("http://www.admu.edu.ph"))
system.time(readLines("http://www.adnu.edu.ph"))
Rprof(readLines("http://www.adnu.edu.ph"))
Rprof(readLines("http://www.ateneo.edu"))
by.total
?Rprof
install.packages("RCurl")
install.packages("rstudioapi")
install.packages("reshape2")
install.packages("nlme")
install.packages(c("digest", "foreign", "httr", "manipulate"))
install.packages("manipulate")
install.packages("httr")
install.packages("httr")
install.packages("foreign")
install.packages("digest")
install.packages("digest")
install.packages("RColorBrewer")
detach("package:stats", unload=TRUE)
library("stats", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("digest")
install.packages(codetools)
install.packages('codetools')
install.packages("digest")
install.packages("digest")
update.packages(checkBuilt=TRUE, ask=FALSE)
restart()
dbDisconnect(hg19)
library("RMySQL")
hg19 <- dbConnect(MySQL(), user="genome", db="hg19",
host = "genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query);
quantile(affyMis$misMatches)
affy$MisSmall <- fetch(query,n=10);
affyMisSmall <- fetch(query,n=10);
dim(affyMisSmall)
dbDisconnect(hg19)
dbClearResult(query);
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
hg19 <- dbConnect(MySQL(), user="genome", db="hg19",
host = "genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
warnings()
affyMis <- fetch(query);
quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10);
head(affyMisSmall)
dbClearResult(query);
dim(affyMisSmall)
names(affyMisSmall)
affyMisSmall$misMatches
dbDisconnect(hg19)
source("http://bioconductor.org/bioclite.R")
library(rhdf5)
bioclite("rhdf5")
install.packages("rhdf5")
source("http://bioconductor.org/bioclite.R")
library(httr)
date()
Sys.date()
Sys.Date()
d2 <- Sys.Date()
d2
format(d2,"a% %b %d")
format(d2,"%a %b %d")
date()
d2
d1 <- date()
date
d1
d1 <- date(, tz="Pacific/Auckland")
Sys.timezone
Sys.timezone()
?Sys.timezone
d1
?date
Sys.time()
class(Sys.time())
d1 <- Sys.time()
d1
class(d1)
?tz
timezone
format(Sys.time(), %a %b %d %X %Y)
format(Sys.time(), "%a %b %d %X %Y")
format(Sys.time(), "%a %b %d %X %Y",tz="Pacific/Auckland")
format(Sys.time(), "%a %b %d %X %Y",tz="US/California")
OlsonNames()
format(Sys.time(), "%a %b %d %X %Y",tz="US/Pacific")
format(Sys.time(), "%a %b %d %X %Y",tz="Asia/Manila)
""
)
quit()
x
?)
)
(0)
q
quit
quit?
,,
"
format(Sys.time(), "%a %b %d %X %Y",tz="Asia/Manila")
Sys.time()
format(Sys.time(), "%a %b %d %X %Y",tz="Asia/Manila")
install.packages(twitteR)
install.packages("twitteR")
getTrends(period="pnp-saf")
library(twitteR)
getTrends(period=
"daily")
require(twitteR)
getTrends(period= "daily")
getTrends(period= "daily")
getTrends(period= "weekly")
install.packages("twitteR")
install.packages("twitteR")
require(twitteR)
getTrends(period = "daily")
library(datasets)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone), main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone, main="Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col="blue"))
with(airquality, plot(Wind, Ozone, main="Ozone and Wind in New York City"))
with(subset(airquality, Month == 6), points(Wind, Ozone, col="blue"))
par(mfrow=c(1,3), mar = c(4,4,2,1), oma = c(0,0,4,0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
source('~/Documents/14-coursera/TRACK04_ExploratoryDataAnalysis/04-courseprojects/project02/exdata-project02.R')
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size=1, prob=0.5)
table(trainIndicator)
nrow(spam)
trainSpam = spam[trainIndicator==1,]
testSpam = spam[trainIndicator==0,]
names(trainSpam)
head(trainSpam)
head(testSpam)
head(trainSpam)
table(trainSpam)
table(trainSpam$type)
table(testSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[,1:4]+1))
head(trainSpam)
head(trainSpam[,1:4])
library(kernlab)
data(spam)
set.seed(3435)
dim(spam)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator==1,]
testSpam = spam[trainIndicator==0,]
head(trainIndicator)
names(trainSpam)
names(testSpam)
head(trainSpam)
head(testSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve+1) ~ trainSpam$type)
plot(log10(trainSpam[,1:4]+1))
hCluster = hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
dim(trainSpam)
hCluster = hclust(dist(t(log10(trainSpam[,1:57]+1))))
hCluster = hclust(dist(t(trainSpam[,1:57])))
hClusterUpdated = hclust(dist(t(log10(trainSpam[,1:57]+1))))
plot(hClusterUpdated)
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[,1:55]+1))))
plot(hClusterUpdated)
head(trainSpam[,54:57])
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x,y) sum(x != (y > 0.5))
costFunction
cvError = rep(NA, 55)
library(boot)
for (i in 1:55){ }
for (i in 1 : 55) {
lmformula = reformulate(names(trainSpam)[i], response = "numType")
glmfit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
?reformulate
lmFormula
for (i in 1 : 55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmfit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
for (i in 1 : 55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
warnings()
names(trainSpam)[which.min(cvError)]
}cvError
cvError
for (i in 1 : 55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
dim(cvError)
length(cvError)
cvError
dim(trainSpam)
?which
?which.min
?which.index
?which
?which.dim
names(trainSpam)[which.min(cvError),arr.ind=TRUE]
names(trainSpam)[which.min(cvError)]
names(trainSpam)[which.min(cvError, arr.ind=TRUE)]
trainSpam[which("charDollar", arr.ind = TRUE)]
which(trainSpam == "charDollar", arr.ind = TRUE)
which(trainSpam == "charDollar")
which(names(trainSpam) == "charDollar")
trainSpam[,53]
names(trainSpam)[53]
which(names(trainSpam) == "charDollar",arr.ind=TRUE)
names(trainSpam)[53]
predictionModel=glm(numType ~ charDollar, Family = "binomial", data = trainSpam)
predictionModel=glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
?version
R.Version()
setwd("~/datasciencecoursera/RepData_PeerAssessment1")
